# -*- coding: utf-8 -*-
"""DBSCAN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W5q7P9eVttSuxoWM7AFdzJunb7WXNzQ4
"""

from sklearn.cluster import DBSCAN
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
import seaborn as sns

data = pd.read_csv('/content/sample_data/churn.csv')
data = data.drop(columns='Exited')
data1 = list(data.columns)[3:-1]
data = data[data1]

# France = 0 , Germany = 1, Spain = 2
for geography in range(len(list(data['Geography']))) :
  if data['Geography'][geography] == 'France' :
    data['Geography'][geography] = 0
  elif data['Geography'][geography] == 'Germany' :
    data['Geography'][geography] = 1
  else:
    data['Geography'][geography] = 2

#Female= 0 , Male = 1
for gender in range(len(list(data['Gender']))):
  if data['Gender'][gender] == 'Female':
    data['Gender'][gender] = 0
  else:
    data['Gender'][gender] = 1

from sklearn.neighbors import NearestNeighbors
nbrs = NearestNeighbors(n_neighbors = 19).fit(data)
neigh_dist, neigh_ind = nbrs.kneighbors(data)
# sort the neighbor distances (lengths to points) in ascending order
# axis = 0 represents sort along first axis i.e. sort along row
sort_neigh_dist = np.sort(neigh_dist, axis = 0)

k_dist = sort_neigh_dist[:, 18]
plt.plot(k_dist)
plt.ylabel("k-NN distance")
plt.xlabel("Sorted observations (18th NN)")
plt.show()

!pip install kneed

from kneed import KneeLocator
kneedle = KneeLocator(x = range(1, len(neigh_dist)+1), y = k_dist, S = 1.0,
                      curve = "concave", direction = "increasing", online=True)

# get the estimate of knee point
print(kneedle.knee_y)

kneedle.plot_knee()
plt.show()

clusters = DBSCAN(eps = 6923.3, min_samples = 18).fit(data)
# get cluster labels
clusters.labels_

# check unique clusters
set(clusters.labels_)
# -1 value represents noisy points could not assigned to any cluster

from collections import Counter
Counter(clusters.labels_)

### Run PCA on the data and reduce the dimensions in pca_num_components dimensions

pca_num_components = 2

reduced_data = PCA(n_components=pca_num_components).fit_transform(data)
results = pd.DataFrame(reduced_data,columns=['pca1','pca2'])

sns.scatterplot(x="pca1", y="pca2", hue=clusters.labels_, data=results)
plt.title('K-means Clustering with 2 dimensions')
plt.show()